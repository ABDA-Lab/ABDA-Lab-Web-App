name: AWS Terraform Plan and Apply

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials for terraform-user
        run: |
          mkdir -p ~/.aws
          echo "[terraform-user]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_TERRAFORM_USER }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_TERRAFORM_USER }}" >> ~/.aws/credentials
          echo "[profile terraform-user]" >> ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
      
      - name: Configure AWS Credentials for wasabi-user
        run: |
          mkdir -p ~/.aws
          echo "[wasabi-user]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_WASABI_USER }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_WASABI_USER }}" >> ~/.aws/credentials
          echo "[profile wasabi-user]" >> ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config

      - name: Validate AWS Credentials for terraform-user
        run: aws sts get-caller-identity --profile terraform-user

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
  
      - name: Install Lambda Edge Dependencies
        working-directory: Terraform/modules/lambda_edge
        run: npm ci

      - name: Bootstrap S3 Backend Bucket with CORS & Policy
        env:
          REFERRER: ${{ secrets.BUCKET_SECRET_REFERRER }}
        run: |
          BUCKET="khangstoragetest"
          REGION="ap-southeast-1"
          ENDPOINT="https://s3.ap-southeast-1.wasabisys.com"
          PROFILE="wasabi-user"

          # Check if bucket exists
          if aws s3api head-bucket --bucket "$BUCKET" --region "$REGION" --profile "$PROFILE" --endpoint-url "$ENDPOINT" 2>/dev/null; then
            echo "Bucket '$BUCKET' already exists."
          else
            echo "Bucket '$BUCKET' does not exist. Creating..."
            aws s3api create-bucket \
              --bucket "$BUCKET" \
              --region "$REGION" \
              --profile "$PROFILE" \
              --endpoint-url "$ENDPOINT" \
              --acl public-read \
              --create-bucket-configuration LocationConstraint="$REGION"
            echo "Waiting 2 minutes for bucket to be fully provisioned..."
            sleep 120
          fi

          # Apply CORS configuration
          echo "Applying CORS configuration..."
          aws s3api put-bucket-cors \
            --bucket "$BUCKET" \
            --profile "$PROFILE" \
            --endpoint-url "$ENDPOINT" \
            --cors-configuration '{
              "CORSRules": [
                {
                  "AllowedHeaders": ["*"],
                  "AllowedMethods": ["GET", "POST", "PUT", "DELETE", "HEAD"],
                  "AllowedOrigins": ["*"],
                  "ExposeHeaders": ["ETag", "x-amz-meta-custom-header", "Location"],
                  "MaxAgeSeconds": 3000
                }
              ]
            }'

          # Apply bucket policy using the REFERRER env var
          echo "Applying bucket policy..."
          aws s3api put-bucket-policy \
            --bucket "$BUCKET" \
            --profile "$PROFILE" \
            --endpoint-url "$ENDPOINT" \
            --policy '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowPublicAccessToPublicFolder",
                  "Effect": "Allow",
                  "Principal": {"AWS": "*"},
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::'"$BUCKET"'/public/*"
                },
                {
                  "Sid": "PrivateAccess",
                  "Effect": "Allow",
                  "Principal": {"AWS": "*"},
                  "Action": "*",
                  "Resource": "arn:aws:s3:::'"$BUCKET"'/private/*",
                  "Condition": {
                    "StringLike": {"aws:Referer": "'"$REFERRER"'"}
                  }
                }
              ]
            }'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "5.87"

      - name: Terraform Init
        working-directory: Terraform
        run: terraform init

      - name: Terraform Format Check
        working-directory: Terraform
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: Terraform
        env:
          ORIGIN_DOMAIN_NAME: ${{ secrets.ORIGIN_DOMAIN_NAME }}
          ORIGIN_PATH: ${{ secrets.ORIGIN_PATH }}
          ABDA_LAB_PUBLIC_KEY_GROUP: ${{ secrets.ABDA_LAB_PUBLIC_KEY_GROUP }}
          LAMBDA_EDGE_SECRET: ${{ secrets.LAMBDA_EDGE_SECRET }}
        run: |
          terraform plan \
            -var="origin_domain_name=${ORIGIN_DOMAIN_NAME}" \
            -var="origin_path=${ORIGIN_PATH}" \
            -var="abda_lab_public_key_group=${ABDA_LAB_PUBLIC_KEY_GROUP}" \
            -var="lambda_edge_secret=${LAMBDA_EDGE_SECRET}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: Terraform
        env:
          ORIGIN_DOMAIN_NAME: ${{ secrets.ORIGIN_DOMAIN_NAME }}
          ORIGIN_PATH: ${{ secrets.ORIGIN_PATH }}
          ABDA_LAB_PUBLIC_KEY_GROUP: ${{ secrets.ABDA_LAB_PUBLIC_KEY_GROUP }}
          LAMBDA_EDGE_SECRET: ${{ secrets.LAMBDA_EDGE_SECRET }}
        run: terraform apply -auto-approve tfplan

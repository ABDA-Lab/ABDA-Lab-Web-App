name: Terraform Destroy

on:
  workflow_dispatch: # Manual trigger

jobs:
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials for terraform-user
        run: |
          mkdir -p ~/.aws
          echo "[terraform-user]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_TERRAFORM_USER }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_TERRAFORM_USER }}" >> ~/.aws/credentials
          echo "[profile terraform-user]" >> ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config

      - name: Configure AWS Credentials for wasabi-user
        run: |
          mkdir -p ~/.aws
          echo "[wasabi-user]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID_WASABI_USER }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY_WASABI_USER }}" >> ~/.aws/credentials
          echo "[profile wasabi-user]" >> ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config

      - name: Validate AWS Credentials for terraform-user
        run: aws sts get-caller-identity --profile terraform-user

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.5"

      - name: Terraform Init
        working-directory: Terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: Terraform
        env:
          BUCKET_SECRET_REFERRER: ${{ secrets.BUCKET_SECRET_REFERRER }}
          ORIGIN_DOMAIN_NAME: ${{ secrets.ORIGIN_DOMAIN_NAME }}
          ORIGIN_PATH: ${{ secrets.ORIGIN_PATH }}
          ABDA_LAB_PUBLIC_KEY_GROUP: ${{ secrets.ABDA_LAB_PUBLIC_KEY_GROUP }}
          LAMBDA_EDGE_SECRET: ${{ secrets.LAMBDA_EDGE_SECRET }}
          INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}
          DESIRED_CAPACITY: ${{ secrets.DESIRED_CAPACITY }}
          MAX_SIZE: ${{ secrets.MAX_SIZE }}
          MIN_SIZE: ${{ secrets.MIN_SIZE }}
          TARGET_PORT: ${{ secrets.TARGET_PORT }}
          LISTENER_PORT: ${{ secrets.LISTENER_PORT }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          ECS_AMI_ID: ${{ secrets.ECS_AMI_ID }}
          SERVICES: ${{ secrets.SERVICES }}
          RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DATABASE: ${{ secrets.DATABASE }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
        run: |
          terraform destroy \
            -var="origin_domain_name=${ORIGIN_DOMAIN_NAME}" \
            -var="origin_path=${ORIGIN_PATH}" \
            -var="abda_lab_public_key_group=${ABDA_LAB_PUBLIC_KEY_GROUP}" \
            -var="lambda_edge_secret=${LAMBDA_EDGE_SECRET}" \
            -var="bucket_secret_referer=${BUCKET_SECRET_REFERRER}" \
            -var="instance_type=${INSTANCE_TYPE}" \
            -var="desired_capacity=${DESIRED_CAPACITY}" \
            -var="max_size=${MAX_SIZE}" \
            -var="min_size=${MIN_SIZE}" \
            -var="target_port=${TARGET_PORT}" \
            -var="listener_port=${LISTENER_PORT}" \
            -var="container_port=${CONTAINER_PORT}" \
            -var="certificate_arn=${CERTIFICATE_ARN}" \
            -var="ecs_ami_id=${ECS_AMI_ID}" \
            -var="services=${SERVICES}" \
            -var="rabbitmq_username=${RABBITMQ_USERNAME}" \
            -var="rabbitmq_password=${RABBITMQ_PASSWORD}" \
            -var="redis_password=${REDIS_PASSWORD}" \
            -var="database=${DATABASE}" \
            -var="jwt_key=${JWT_KEY}" \
            -auto-approve

      - name: Delete All ECR Repositories
        run: |
          for service in $SERVICES; do
            echo "Deleting repository: $service"
            aws ecr delete-repository --repository-name "$service" --profile terraform-user --region $AWS_DEFAULT_REGION --force
          done
        env:
          AWS_DEFAULT_REGION: us-east-1
          SERVICES: ${{ secrets.SERVICES }}